}
unique(gapminder$country)
for (country in unique(gapminder$country)){
if (mean(gapminder$lifeExp[gapminder$country==country]) < mean(gapminder$lifeExp)){
print(paste(country,'has a mean life expectancy that is less than overall mean for the dataset: ',
mean(gapminder$lifeExp[gapminder$country==country])))
}
}
for (country in unique(gapminder$country)){
if (mean(gapminder$lifeExp[gapminder$country==country]) < mean(gapminder$lifeExp)){
print(paste(country,'(',mean(gapminder$lifeExp[gapminder$country==country]),
')has a mean life expectancy that is less than overall mean for the dataset: ',
))
}
}
for (country in unique(gapminder$country)){
if (mean(gapminder$lifeExp[gapminder$country==country]) < mean(gapminder$lifeExp)){
print(paste(country,'has a mean life expectancy that is less than overall mean for the dataset: ',
mean(gapminder$lifeExp[gapminder$country==country])))
}
}
for (country in unique(gapminder$country)){
if (mean(gapminder$pop[gapminder$country==country]) < mean(gapminder$pop)){
print(paste('Mean life expectancy in',country, 'is',
mean(gapminder$lifeExp[gapminder$country==country])))
}
}
for (country in unique(gapminder$country)){
if (mean(gapminder$pop[gapminder$country==country]) > mean(gapminder$pop)){
print(paste('Mean life expectancy in',country, 'is',
mean(gapminder$lifeExp[gapminder$country==country])))
}
}
for (countinent in unique(gapminder$continent)){
if (mean(gapminder$lifeExp[gapminder$continent==countinent]) < 50){
print('Mean Life Expectancy in',countinent ,'is less than 50')
} else if (mean(gapminder$lifeExp[gapminder$continent==countinent]) > 70){
print('Mean Life Expectancy in',countinent ,'is greater than 70')
} else{
print('Mean Life Expectancy in',countinent ,'is between 50 and 70')
}
}
for (countinent in unique(gapminder$continent)){
if (mean(gapminder$lifeExp[gapminder$continent==countinent]) < 50){
print(paste('Mean Life Expectancy in',countinent ,'is less than 50'))
} else if (mean(gapminder$lifeExp[gapminder$continent==countinent]) > 70){
print(paste('Mean Life Expectancy in',countinent ,'is greater than 70'))
} else{
print(paste('Mean Life Expectancy in',countinent ,'is between 50 and 70'))
}
}
df = gapminder
print(colnames(df))
class(df)
class(df[,1])
df = gapminder
report_colname_class =
function(df) {
for (col in 1:ncol(df)) {
print(paste('column name is',colnames(df)[col],'with data type:',class(df[,col])))
}
}
report_colname_class(gapminder)
df = gapminder
report_colname_class =
function(df) {
for (col in 1:ncol(df)) {
print(paste('column name is',colnames(df)[col],'; data type:',class(df[,col])))
}
}
report_colname_class(gapminder)
df = gapminder
report_colname_class =
function(df) {
for (col in 1:ncol(df)) {
print(paste(colnames(df)[col],'; data type:',class(df[,col])))
}
}
report_colname_class(gapminder)
df = gapminder
report_colname_class =
function(df) {
for (col in 1:ncol(df)) {
print(paste('Data type of column',colnames(df)[col], 'is', class(df[,col])))
}
}
report_colname_class(gapminder)
df = gapminder
report_colname_class =
function(df) {
for (col in 1:ncol(df)) {
print(paste('Data type of column',colnames(df)[col], 'is:', class(df[,col])))
}
}
report_colname_class(gapminder)
x=nrom(5)
x=1:10
vector_stats_printer(x)
vector_stats_printer =
function(x) {
cat(
"Mean value:", mean(x,na.rm = T),
"\nMedian value:", median(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
}
vector_stats_printer(x)
vector_stats_printer =
function(x) {
if (length(x)>0){
cat(
"Mean value:", mean(x,na.rm = T),
"\nMedian value:", median(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
} else{
print('Error: Empty Vector')
}
}
x=1:10
vector_stats_printer(x)
x=NA
vector_stats_printer(x)
length(x)
is.na(x)
vector_stats_printer =
function(x) {
if (!is.na(x)){
cat(
"Mean value:", mean(x,na.rm = T),
"\nMedian value:", median(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
} else{
print('Error: Empty Vector')
}
}
x=NA
vector_stats_printer(x)
x=1:20
vector_stats_printer(x)
vector_stats_printer =
function(x) {
if (!is.na(x)){
cat(
"Mean value:", mean(x,na.rm = T),
"\nMedian value:", median(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
} else{
print('Error: Empty Vector')
}
}
x=1:20
vector_stats_printer(x)
!is.na(x)
vector_stats_printer =
function(x,include_median = FALSE) {
if (include_median){
cat(
"Mean value:", mean(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T),
"\nMedian value:", median(x,na.rm = T)
)
} else{
cat(
"Mean value:", mean(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
}
}
vector_stats_printer(x,T)
vector_stats_printer(x,F)
vector_stats_printer =
function(x,include_median = FALSE) {
cat(
"Mean value:", mean(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
if (include_median){
cat("Median value:", median(x,na.rm = T)
)
}
}
vector_stats_printer(1:30,F)
vector_stats_printer(1:30,T)
vector_stats_printer =
function(x,include_median = FALSE) {
cat(
"Mean value:", mean(x,na.rm = T),
"\nStandard Deviation:", sd(x,na.rm = T)
)
if (include_median){
cat("\nMedian value:", median(x,na.rm = T)
)
}
}
vector_stats_printer(1:30,T)
plot(x=log(gapminder$gdpPercap),y=log(gapminder$lifeExp))
unique(gapminder$continent)
unique(gapminder$year)
for (year in unique(gapminder$year)){
plot(x=log(gapminder$gdpPercap[gapminder$year=year]),y=log(gapminder$lifeExp[gapminder$year=year]))
for (year in unique(gapminder$year)){
plot(x=log(gapminder$gdpPercap[gapminder$year==year]),y=log(gapminder$lifeExp[gapminder$year==year]))
}
for (countinent in unique(gapminder$continent)){
plot(x=log(gapminder$gdpPercap[gapminder$continent==continent]),y=log(gapminder$lifeExp[gapminder$continent==continent]))
}
for (continent in unique(gapminder$continent)){
plot(x=log(gapminder$gdpPercap[gapminder$continent==continent]),
y=log(gapminder$lifeExp[gapminder$continent==continent]))
}
getwd()
generation_dp = read.csv("/Users/siqili/Desktop/bootcamp-2019/data/ca_energy_generation.csv")
#day 2 in class exercise
generation_dp = read.csv("/Users/siqili/Desktop/bootcamp-2019/data/ca_energy_generation.csv",stringsAsFactors = F)
#day 2 in class exercise
generation_dp = read.csv("/Users/siqili/Desktop/bootcamp-2019/data/ca_energy_generation.csv",stringsAsFactors = F)
imports_dp = read.csv("/Users/siqili/Desktop/bootcamp-2019/data/ca_energy_imports.csv",stringsAsFactors = F)
View(imports_dp)
#day 2 in class exercise
generation_dp = read.csv("/Users/siqili/Desktop/bootcamp-2019/data/ca_energy_generation.csv",stringsAsFactors = F)
imports_dp = read.csv("/Users/siqili/Desktop/bootcamp-2019/data/ca_energy_imports.csv",stringsAsFactors = F)
#day 2 in class exercise
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors = F)
#day 2 in class exercise
library(lubridate)
generation_dp$datetime = as.datatime(generation_dp$datetime)
#day 2 in class exercise
library(lubridate)
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors = F)
generation_dp$datetime = as.datatime(generation_dp$datetime) # from package 'lubridate': convert data type
generation_dp$datetime = as.datetime(generation_dp$datetime) # from package 'lubridate': convert data type
generation_dp$datetime = as_datetime(generation_dp$datetime) # from package 'lubridate': convert data type
#day 2 in class exercise
library(lubridate)
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors = F)
generation_dp$datetime = as_datetime(generation_dp$datetime) # from package 'lubridate': convert data type
imports_dp$datetime = as_datetime(imports_dp$datetime)
##reshaping data
head(generation_dp)
library(reshape2)
long_gen = melt(generation_dp, id.vars = 'datetime', variable.name = 'source',value.name = 'usage')
View(long_gen)
generation_dp %>% view
library(dplyr)
generation_dp %>% view
generation_dp %>% view()
generation_dp %>% View()
library(dplyr)
#merge function
merge_energy = merge(generation_dp,imports_dp,by = 'datetime')
View(merge_energy)
?merge
long_merged_energy = melt(generation_dp, id.vars = 'datetime', variable.name = 'source',value.name = 'usage')
View(long_merged_energy)
unique(long_merged_energy$source)
#merge function
merged_energy = merge(generation_dp, imports_dp, by = 'datetime')
long_merged_energy = melt(merged_energy, id.vars = 'datetime', variable.name = 'source',value.name = 'usage')
View(merged_energy)
View(long_merged_energy)
unique(long_merged_energy$source)
?rm
#day 2 in class exercise
rm(list = ls())
library(lubridate)
library(reshape2)
library(dplyr)
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors = F)
generation_dp$datetime = as_datetime(generation_dp$datetime) # from package 'lubridate': convert data type
imports_dp$datetime = as_datetime(imports_dp$datetime)
##reshaping data
head(generation_dp)
long_gen = melt(generation_dp, id.vars = 'datetime', variable.name = 'source',value.name = 'usage') # change to long-format
#merge function
merged_energy = merge(generation_dp, imports_dp, by = 'datetime')
long_merged_energy = melt(merged_energy, id.vars = 'datetime', variable.name = 'source',value.name = 'usage')
library(data.table)
library(tidyverse)
#data manipulation
merged_energy %>% select(biogas)
#data manipulation
merged_energy %>% select(biogas) %>% colnames()
#data manipulation
merged_energy %>% filter(imports > 7000)
#data manipulation
merged_energy %>% filter(imports > 7000) %>% nrows()
#data manipulation
merged_energy %>% filter(imports > 7000) %>% nrow()
#data manipulation
merged_energy %>% filter(imports > 7000 , natural_gas < 7000) %>% nrow()
long_merged_energy %>% mutate(log_usage = log(usage)) %>% head()
long_merged_energy %>% mutate(log_usage = log(usage), usage_sq = usage^2) %>% head()
long_merged_energy %>% summarise(total = sum(usage, na.rm = T))
long_merged_energy %>% summarise(total = sum(usage, na.rm = T), mean = mean(usage,na.rm = T))
long_merged_energy %>% filter(source == 'geothermal') %>% select(-datetime) %>% mutate(log_usage = log(usage)) %>%
summarise(mean_log_usage = mean(log_usage,na.rm = T))
long_merged_energy %>%
filter(source == 'geothermal') %>%
select(-datetime) %>%
mutate(log_usage = log(usage)) %>%
summarise(mean_log_usage = mean(log_usage,na.rm = T))
long_merged_energy %>%
select(-datetime) %>%
mutate(total_usage = rowSums(.,na.rm = T)) %>%
summarise(total_usage = sum(total_usage,na.rm = T))
long_merged_energy
long_merged_energy %>%
select(-datetime)
long_merged_energy %>%
select(-datetime) %>%
mutate(total_usage = rowSums(.,na.rm = T))
merged_energy %>%
select(-datetime) %>%
mutate(total_usage = rowSums(., na.rm = T)) %>%
summarize(total_usage = sum(total_usage, na.rm = T))
merged_energy %>% select(contains('hyrdo'))
merged_energy %>% select(contains("hyrdo"))
merged_energy %>% filter(contains("hyrdo")) %>% mutate(total_hydro = sum)
merged_energy %>% select(contains("hydro"))
merged_energy %>% select(contains("hydro")) %>% mutate(total_hydro = rowSums(., na.rm = T))
merged_energy %>% select(contains("hydro")) %>% mutate(total_hydro = rowSums(., na.rm = T)) %>%
summarise(mean_usage =mean(total_hydro, na.rm = T))
?rowSums
long_merged_energy %>%
group_by(source) %>%
summarize(sum_usage = sum(usage, na.rm = T))
merged_energy %>%
select(contains("hydro")) %>%
mutate(total_hydro = rowSums(.., na.rm = T)) %>% ##remember to use '.'
summarise(mean_usage = mean(total_hydro, na.rm = T))
View(long_merged_energy)
long_merged_energy %>% group_by(source) %>% summarise(ave_usage = mean(usage,na.rm = T))
long_merged_energy %>% group_by(source) %>%
summarise(ave_usage = mean(usage,na.rm = T)) %>%
filter(small_hydro)
long_merged_energy %>% group_by(source) %>%
summarise(ave_usage = mean(usage,na.rm = T)) %>%
filter(source %in% c('small_hydro',large_hydro))
long_merged_energy %>% group_by(source) %>%
summarise(ave_usage = mean(usage,na.rm = T)) %>%
filter(source %in% c('small_hydro','large_hydro'))
long_merged_energy %>% group_by(source) %>%
summarise(ave_usage = mean(usage,na.rm = T)) %>%
filter(source %in% c('small_hydro','large_hydro','biogas','biomass'))
?str_detect
View(merged_energy)
merged_energy %>% select(small_hydro,large_hydro,biogas,biomass)
merged_energy %>% select(small_hydro,large_hydro,biogas,biomass) %>%
summarise_all(mean())
summarise_all(mean
merged_energy %>% select(small_hydro,large_hydro,biogas,biomass) %>%
summarise_all(mean)
merged_energy %>% select(small_hydro,large_hydro,biogas,biomass) %>%
summarise_all(mean)
#################
#Part 2 data.table
#################
# import data.table library
library(data.table)
data_file <- here::here("data", "ca_energy_generation.csv")
# read in two versions of data, one as a data.frame and one as a data.table
generation_df <- read.csv(data_file, stringsAsFactors = F)
generation_dt <- fread(data_file)
generation_df <- read.csv(data_file, stringsAsFactors = F)
generation_dt <- fread(data_file)
View(generation_df)
generation_df
generation_dt
str(generation_df)
str(generation_dt)
generation_dt[wind > 4400 & mday(datetime) == 7]
generation_dt[natural_gas <= 5000 & large_hydro >2000]
generation_dt[coal >10 & solar > median(solar)]
generation_dt[,3 * wind + solar * biogas/2]
generation_dt[,newcol := 3*wind + solar*biogas/2]
generation_dt[,.(newcol = 3*wind + solar*biogas/2)]
#practice
generation_dt[total_hydro := small_hydro+large_hydro]
#practice
generation_dt[, total_hydro := small_hydro+large_hydro]
generation_dt
generation_dt[,mean(nuclear),mean(biogas) ]
generation_dt[,.(mean(nuclear),mean(biogas)) ]
generation_dt[solar==0,.(datetime, total_thermal = natural_gas+coal)]
# group_by operator
generation_dt[,mean(nuclear), by = mday(datetime)]
generation_dt[,.(mean_nuc = mean(nuclear), mean_wind = mean(wind)),
by = mday(datetime)]
generation_dt[hour(datetime) > 19,
.(mean_nuc = mean(nuclear), mean_wind = mean(wind)),
by = mday(datetime)]
#practice
generation_dt[,.(median(solar)), by = hour(datetime)]
generation_dt[solar>0, .(max(natural_gas)),by = mday(datetime)]
#practice
generation_dt[,.(median(solar)), by = hour(datetime)]
#practice
generation_dt[,.(median(solar)), by = hour(datetime)]
generation_dt[solar>0, .(max(natural_gas)),by = mday(datetime)]
generation_dt[solar>0, max(natural_gas),by = mday(datetime)]
#practice
generation_dt[,.(median(solar)), by = hour(datetime)]  #Q:when do we need to add period?
#practice
generation_dt[,.(median(solar)), by = hour(datetime)]  #Q:when do we need to add period?
generation_dt[,median(solar), by = hour(datetime)]
generation_dt[solar>0, .(max(natural_gas)), by = mday(datetime)]
generation_dt[solar>0, max(natural_gas), by = mday(datetime)]
temp1 = long_merged_energy[,.(day = day(datetime), log_usage = log(usage)), by = day]
temp1 = long_merged_energy[,.(day = day(datetime), log_usage = log(usage))]
ong_merged_energy[,.(day = day(datetime), log_usage = log(usage))]
long_merged_energy
ong_merged_energy[,.(day = day(datetime), log_usage = log(usage))]
long_merged_energy[,.(day = day(datetime), log_usage = log(usage))]
# for .N: convenient
all_generation_long[,.N]
all_generation_long[,.N, by = type]
# for .I: more advanced syntax
all_generation_long[,.I]
?rm
rm(list = ls())
answers<-params$answers
knitr::opts_chunk$set(echo=answers, eval=answers,
warning = FALSE, message = FALSE,
cache = FALSE, tidy = FALSE)
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors = F)
generation_dp$datetime = as_datetime(generation_dp$datetime)
imports_dp$datetime = as_datetime(imports_dp$datetime)
View(imports_dp)
head(generation_dp)
long_gen = melt(generation_dp, id.vars = 'datetime', variable.name = 'source',value.name = 'usage') # change to long-format
View(long_gen)
long_gen %>% mutate(day = day(datetime))
long_gen %>% mutate(day = as_date(datetime))
long_gen %>% mutate(day = as_date(datetime), log_output = log(usage))
long_gen %>% mutate(day = as_date(datetime), log_output = log(usage)) %>%
group_by(day) %>% summarise(total_output = sum(usage))
long_gen
View(generation_dp)
View(imports_dp)
long_gen %>% mutate(day = as_date(datetime), log_output = log(usage)) %>%
group_by(day) %>% summarise(total_daily_output = sum(usage))
long_gen %>% mutate(day = as_date(datetime), log_output = log(usage)) %>%
group_by(day) %>% summarise(total_daily_output = sum(usage)) %>%
ungroup() %>% summarise(per_output = usage/total_daily_output)
long_gen %>% mutate(day = as_date(datetime), log_output = log(usage)) %>%
group_by(day) %>% summarise(total_daily_output = sum(usage)) %>%
ungroup()
long_gen %>% mutate(day = as_date(datetime), log_output = log(usage)) %>%
group_by(day) %>% mutate(total_daily_output = sum(usage)) %>%
ungroup() %>% mutate(per_output = usage/total_daily_output)
long_gen %>% group_by(source,hour(datetime)) %>% summarise(ave_output = mean(usage))
long_gen %>% group_by(source,hour(datetime)) %>% summarise(ave_output = mean(usage)) %>% arrange(desc(ave_output))
View(generation_dp)
#2
long_gen %>% group_by(source,day(datetime)) %>% summarise(ave_output = mean(usage)) %>% arrange(desc(ave_output))
#2
long_gen %>% group_by(source,mday(datetime)) %>% summarise(ave_output = mean(usage)) %>% arrange(desc(ave_output))
View(long_gen)
#1 natural gas has the greatest mean output by hour: 16057.226190 at 1800
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage)) %>% arrange(desc(ave_output))
#2
long_gen %>% group_by(source,as_date(datetime)) %>% summarise(ave_output = mean(usage)) %>% arrange(desc(ave_output))
#1 natural gas has the greatest mean output by hour: 10634.254960
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
#2
long_gen %>% group_by(source,as_date(datetime)) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
long_gen %>% filter(usage !=0)
#2 natural gas has the highest output by day:
long_gen  %>% group_by(source,as_date(datetime)) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
long_gen
long_gen %>% filter(usage !=0)
#2 natural gas has the highest output by day:
long_gen %>% filter(usage !=0) %>% group_by(source,as_date(datetime)) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
#3.
long_gen %>% filter(usage !=0) %>% group_by(source) %>% summarise(variance = var(usage))
#3.
long_gen %>% filter(usage !=0) %>% group_by(source) %>% summarise(variance = var(usage)) %>% arrange(desc(variance))
#3.
long_gen %>% filter(usage !=0) %>% group_by(source) %>% summarise(variance = var(usage)) %>% arrange(desc(variance)) %>%
filter(row_number()==1 | row_number()==n())
#1. natural gas has the greatest mean output by hour: 10634.254960
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
regroup <- read.csv(here::here("data/regroup.csv"), stringsAsFactors = F)
regroup <- read.csv(here::here("data/ca_energy_regroup.csv"), stringsAsFactors = F)
View(regroup)
long_gen %>% left_join(regroup)
?left_join
long_gen %>% left_join(regroup, by = c('source','type'))
View(long_gen)
View(long_gen)
left_join(long_gen,regroup, by = c('source','type'))
long_gen %>% left_join(regroup, by = c('source'='type'))
joined_long_gen = long_gen %>% left_join(regroup, by = c('source'='type'))
View(joined_long_gen)
View(regroup)
#2. natural gas has the highest output by day: 15403.371528 on 2019-09-05
long_gen %>% filter(usage !=0) %>% group_by(source,as_date(datetime)) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
joined_long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>% arrange(desc(ave_output))
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>%
arrange(desc(ave_output)) %>% left_join(regroup, by = c('source'='type'))
long_gen %>% group_by(source) %>% summarise(ave_output = mean(usage,na.rm = T)) %>%
arrange(desc(ave_output)) %>% left_join(regroup, by = c('source'='type')) %>% arrange(desc(group))
